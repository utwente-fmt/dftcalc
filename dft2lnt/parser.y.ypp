/*
 * parser.y.ypp
 *
 * Part of dft2lnt library - a library containing read/write operations for DFT
 * files in Galileo format and translating DFT specifications into Lotos NT.
 *
 * Adapted by Gerjan Stokkink to support Mac OS X.
 *
 * @author Freark van der Berg and extended by Dennis Guck
 */

%define api.pure
%locations
%defines
%define parse.error verbose
%require "3.3"

%parse-param{ Parser* currentParser}
%parse-param{ yyscan_t scanner}
%parse-param{ DFT::AST::ASTNodes** result_nodes}
%lex-param { yyscan_t scanner }

//%define api.pure

// Header
%code requires {

	#define __PARSER_Y_HPP

	#include <stdint.h>
	#include <vector>
	#include <string>
//	#ifndef COMPILING_LEXER
//	#	include "lexer.l.h"
//	#endif
	#include "dftnodes/nodes.h"
	#include "dft_ast.h"
	#include "DFTree.h"
	#include "dft2lnt.h"
	#include "dft_parser.h"

#ifdef assert
	#undef assert
#endif
#define assert(e) if(e) {} else { cerr << endl << __FILE__ << ":" << __LINE__ << ":" << endl << "Assertion failed: " << #e << endl; errno = *(int*)(e); }

	typedef struct NumberSuffix {
		int number;
		char* suffix;
	} NumberSuffix;

	typedef struct Voting {
		int n;
		int k;
	} Voting;

	typedef struct RealWithString {
		double val;
		std::string str_val;
	} RealWithString;
    
    class Inspection {
	public:
        int n;
        decnumber<> k;
		Inspection() : k(0) { }
    };
    
    typedef struct Replacement {
        int n;
        double k;
    } Replacement;

}

%union {
		int number;
		RealWithString *realOrig;
		char character;
		char* c_string;
		char* address;
		Voting voting;
        Replacement replacement;
        Inspection *inspection;
		DFT::AST::ASTNodes* nodes;
		DFT::AST::ASTNode* node;
		DFT::DFTree* dft;
		DFT::AST::ASTIdentifier* string;
		DFT::AST::ASTIdentifiers* strings;
		DFT::AST::ASTAttribute* attribute;
		DFT::AST::ASTAttributes* attributes;
		DFT::AST::ASTAttrib* attributeValue;
		DFT::AST::ASTGateType* gateType;
}

%code {
//	#include "dft_parser.h"
	#include "yyheader.h"
//	#include "parser.y.hpp"
}

%token <c_string> IDENTIFIER
%token <c_string> STRING
%token <realOrig> REAL
%token <character> CHAR
%token <number> NUMBER
%token <voting> VOTING
%token <inspection> INSPECTION
%token <replacement> REPLACEMENT

// Gate names
%token<c_string> PHASEDOR
%token<c_string> OR
%token<c_string> AND
%token<c_string> SAND
%token<c_string> HSP
%token<c_string> WSP
%token<c_string> CSP
%token<c_string> PAND
%token<c_string> POR
%token<c_string> SEQ
%token<c_string> OF
%token<c_string> FDEP
%token<c_string> RU
%token<c_string> RU_F
%token<c_string> RU_P
%token<c_string> RU_ND
%token<c_string> INSP
%token<c_string> REP
%token<c_string> TRANSFER

// Attribute names
%token<c_string> PROB
%token<c_string> LAMBDA
%token<c_string> RATE
%token<c_string> SHAPE
%token<c_string> MEAN
%token<c_string> STDDEV
%token<c_string> COV
%token<c_string> RES
%token<c_string> REPL
%token<c_string> DORM
%token<c_string> MAINTAIN
%token<c_string> APH
%token<c_string> PHASES
%token<c_string> REPAIR
%token<c_string> PRIO
%token<c_string> INTERVAL

// Other
%token ENDLINE
%token EQUALS
%token MINUS
%token TOPLEVEL
%token PAGE
%token PHASE
%token SEMICOLON

// Rules
%type <nodes> lines dft
%type <node>  line toplevel_line gate_line be_line page_line
%type <strings>  names
%type <string>  string nodeid
%type <gateType> gate
%type <attributes>  be_attribs
%type <attribute>  be_attrib
%type <attribute>  be_attrib_name
%type <attributeValue> be_attrib_value
%type <number> number
%type <realOrig> floatingpoint

//%type <dft>       dft

%initial-action{

	// Likely this has no effect, as YYLLOC_DEFAULT() is called to init the first location
	@$.setFileName(currentParser->getCurrentFileName());
}

%%

dft //{
	:	lines
	{
		*result_nodes = $1;
//		$$ = DFT::DFT2LNT::createDFT(*$1);
//		for(int i=0; i<$1->size();++i) {
//			delete $1->at(i);
//		}
//		delete $1;
		@$ = @$; // Otherwise yylloc is not defined
	}
	;
//}

/* Rule 1: A DFT specification consists of a number of lines */
lines //{
	:	/* empty */
	{
		$$ = new DFT::AST::ASTNodes();
		@$.nullify();
	}
	|	lines line
	{
		assert($1);
		if($2) $1->push_back($2);
#ifdef DEBUG
		if(!$2) { currentParser->getCC()->reportWarningAt(@2,"line not added"); }
#endif
		$$ = $1;
	}
	;
//}

/* Rule 2: A line either defines the toplevel element, a gate, a basic event or a page allocation */
line //{
	:	toplevel_line
	|	gate_line
	|	be_line
	|	page_line
	|	error {
		currentParser->getCC()->reportErrorAt(@1,"unexpected tokens");
		$$ = NULL;
		yyclearin;
		yyerrok;
	}
	;
//}

/* Rule 3: A list of zero or more names */
names //{
	:	/* empty */
	{
		$$ = new DFT::AST::ASTIdentifiers();
		@$.nullify();
	}
	|	names nodeid
	{
		assert($1);
		if($2) $1->push_back($2);
#ifdef DEBUG
		if(!$2) { currentParser->getCC()->reportWarningAt(@2,"nodeid not added"); }
#endif
		$$ = $1;
	}
	;
//}

/* Rule 4: A list of zero or more BE attributes */
be_attribs //{
	:	/* empty */
	{
		$$ = new DFT::AST::ASTAttributes();
		@$.nullify();
	}
	|	be_attribs be_attrib
	{
		assert($1);
		if($2) $1->push_back($2);
#ifdef DEBUG
		if(!$2) { currentParser->getCC()->reportWarningAt(@2,"be_attrib not added"); }
#endif
		$$ = $1;
	}
	;
//}

be_attrib // {
	:	be_attrib_name EQUALS be_attrib_value
	{
		$$ = $1;
		$$->setValue($3);
	}
//	:	be_attrib_name EQUALS floatingpoint
//	{
//		$$ = $1;
//		$$->setValue(new DFT::AST::ASTAttribFloat(@3,$3));
//	}
//	|	be_attrib_name EQUALS NUMBER
//	{
//		$$ = $1;
//		$$->setValue(new DFT::AST::ASTAttribNumber(@3,$3));
//	}
//	|	be_attrib_name EQUALS string
//	{
//		$$ = $1;
//		$1->setValue(new DFT::AST::ASTAttribString(@3,$3));
//	}

	/** Error rules */
	|	IDENTIFIER EQUALS be_attrib_value
		{
			currentParser->getCC()->reportErrorAt(@1,"unsupported attribute name: `" + string($1) + "'");
			free($1);
			$$ = NULL;
		}
	|	error EQUALS be_attrib_value
		{
			currentParser->getCC()->reportErrorAt(@1,"unexpected tokens, expected attribute name");
			$$ = NULL;
		}
// Causes shift/reduce conflicts
//	|	EQUALS be_attrib_value
//		{
//			currentParser->getCC()->reportErrorAt(@1.begin(),"expected attribute name");
//			$$ = NULL;
//		}
	|	be_attrib_name EQUALS IDENTIFIER
		{
			if(!YYRECOVERING()) currentParser->getCC()->reportErrorAt(@$,"assigning identifiers not supported");
			free($3);
			$$ = NULL;
		}
	|	be_attrib_name EQUALS error
		{
			currentParser->getCC()->reportErrorAt(@3,"unexpected tokens, expected attribute value");
			$$ = NULL;
		}
// Causes shift/reduce conflicts
//	|	be_attrib_name EQUALS
//		{
//			currentParser->getCC()->reportErrorAt(@2.end(),"expected attribute value");
//			$$ = NULL;
//		}
	|	be_attrib_name
		{
			currentParser->getCC()->reportErrorAt(@1.end(),"name needs a value assigned");
			$$ = NULL;
		}

// Causes shift/reduce conflicts
//	|	be_attrib_value
//		{
//			currentParser->getCC()->reportErrorAt(@1.begin(),"value needs to be assigned to a name");
//			$$ = NULL;
//		}
	;
//}

be_attrib_name //{
//	:	IDENTIFIER { $$ = new DFT::AST::ASTIdentifier(@1,std::string($1)); free($1); }
	:	PROB   { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelProb  ); free($1); }
	|	LAMBDA { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelLambda); free($1); }
	|	RATE   { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelRate  ); free($1); }
	|	SHAPE  { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelShape ); free($1); }
	|	MEAN   { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelMean  ); free($1); }
	|	STDDEV { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelStddev); free($1); }
	|	COV    { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelCov   ); free($1); }
	|	RES    { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelRes   ); free($1); }
	|	REPL   { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelRepl  ); free($1); }
	|	DORM   { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelDorm  ); free($1); }
	|	MAINTAIN{ $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelMaintain); free($1); }
	|	PHASES { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelPhases); free($1); }
	|	APH    { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelAph   ); free($1); }
	|	REPAIR { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelRepair); free($1); }
	|	PRIO   { $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelPrio); free($1); }
	|	INTERVAL{ $$ = new DFT::AST::ASTAttribute(@1,std::string($1),DFT::Nodes::BE::AttrLabelInterval); free($1); }
	;
//}

be_attrib_value //{
	:	floatingpoint
	{
		$$ = new DFT::AST::ASTAttribFloat(@1,$1->val,$1->str_val);
	    delete $1;
	}
	|	number
	{
		$$ = new DFT::AST::ASTAttribNumber(@1,$1);
	}
	|	string
	{
		$$ = new DFT::AST::ASTAttribString(@1,$1);
	}
	;
//}

/* Rule 5: The toplevel line defines the toplevel element of the DFT */
toplevel_line //{
	:	TOPLEVEL nodeid SEMICOLON
		{
			//printf("TopLevel "); LOCATION_PRINT(@$);
			$$ = new DFT::AST::ASTTopLevel(@$,$2);
		}

	/** Error rules */
	|	TOPLEVEL SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@1.end(),string("expected nodeid"));
			$$ = NULL;
		}

	|	TOPLEVEL error SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@2,string("unexpected tokens, expected nodeid"));
			$$ = NULL;
		}
	;
//}

/* Rule 6: A gate line defines a gate with its inputs */
gate_line //{
	:	nodeid gate names SEMICOLON
		{
			$$ = new DFT::AST::ASTGate(@$,$1,$2,$3);
		}
	|	nodeid number gate number names SEMICOLON
		{
			$$ = new DFT::AST::ASTGate(@$,$1,$3,$5);
		}

	/** Error rules */
// Causes shift/reduce errors
//	|	nodeid gate names be_attribs SEMICOLON
//		{
//			currentParser->getCC()->reportErrorAt(@4,"gate `" + $1->getString() + "':gates cannot have attributes");
//			$$ = NULL;
//		}
//	|	nodeid gate names error be_attribs SEMICOLON
//		{
//			currentParser->getCC()->reportErrorAt(@4,"gate `" + $1->getString() + "':gates cannot have attributes");
//			$$ = NULL;
//		}
	|	nodeid gate names error SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@4,"gate `" + $1->getString() + "':unexpected tokens before semicolon");
			delete $1;
			$$ = NULL;
		}
	;
//}

/* Rule 7: A basic event line describes a basic event with its attributes and its phase */
be_line //{
	:	nodeid be_attribs SEMICOLON
		{
			//printf("BE1 "); LOCATION_PRINT(@$);
			DFT::AST::ASTBasicEvent* be = new DFT::AST::ASTBasicEvent(@$,$1);
			be->setAttributes($2);
			$$ = be;
		}
	|	nodeid PHASE number be_attribs SEMICOLON
		{
			//printf("BE2 "); LOCATION_PRINT(@$);
			DFT::AST::ASTBasicEvent* be = new DFT::AST::ASTBasicEvent(@$,$1);
			be->setPhase($3);
			be->setAttributes($4);
			$$ = be;
		}

	/** Error rules */
	|	nodeid PHASE be_attribs SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@2.end(),string("basicevent `" + $1->getString() + "':phase number expected"));
			delete $1;
			$$ = NULL;
		}
	;
//}

/* Rule 8: A page line assigns an element to a page (for the graphical display of Galileo) */
page_line //{
	:	PAGE number nodeid SEMICOLON
		{
			$$ = new DFT::AST::ASTPage(@$,$2,$3);
		}
	/** Error rules */
	|	PAGE nodeid SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@1.end(),string("page number expected"));
			delete $2;
			$$ = NULL;
		}
	|	PAGE number SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@2.end(),string("nodeid expected"));
			$$ = NULL;
		}
	|	PAGE error nodeid SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@1,string("unexpected token, page number expected"));
			delete $3;
			$$ = NULL;
		}
	|	PAGE number error SEMICOLON
		{
			currentParser->getCC()->reportErrorAt(@2.end(),string("unexpected token, nodeid expected"));
			$$ = NULL;
		}
	;
//}

/* gate */
gate //{
	:	PHASEDOR  { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GatePhasedOrType  ); free($1); }
	|	OR        { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateOrType        ); free($1); }
	|	AND       { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateAndType       ); free($1); }
	|	SAND      { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateSAndType      ); free($1); }
	|	HSP       { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateHSPType       ); free($1); }
	|	WSP       { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateWSPType       ); free($1); }
	|	CSP       { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateCSPType       ); free($1); }
	|	PAND      { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GatePAndType      ); free($1); }
	|	POR       { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GatePorType       ); free($1); }
	|	SEQ       { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateSeqType       ); free($1); }
	|	VOTING    { $$ = new DFT::AST::ASTVotingGateType(@$,$1.k,$1.n);                                          }
	|	FDEP      { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateFDEPType      ); free($1); }
	|	RU        { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::RepairUnitType    ); free($1); }
	|	RU_F      { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::RepairUnitFcfsType); free($1); }
	|	RU_P      { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::RepairUnitPrioType); free($1); }
	|	RU_ND     { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::RepairUnitNdType  ); free($1); }
    |	INSPECTION{
				$$ = new DFT::AST::ASTInspectionType(@$,$1->n,decnumber<>($1->k));
				delete $1;
		}
    |	REPLACEMENT{ $$ = new DFT::AST::ASTReplacementType(@$,$1.n,$1.k);                                        }
	|	TRANSFER  { $$ = new DFT::AST::ASTGateType(@1,std::string($1),DFT::Nodes::GateTransferType  ); free($1); }
	;
//}

/* Node identifier (string) */
nodeid
	: string
	;

string //{
	:	STRING {
		$$ = new DFT::AST::ASTIdentifier(@1,std::string($1));
		free($1);
	}
//}

floatingpoint //{
	:	REAL
		{
			$$ = $1;
		}
//	|	MINUS FLOAT
//		{
//			$$ = -$2;
//		}
//}

number //{
	:	NUMBER
//	|	MINUS NUMBER
//		{
//			$$ = -$2;
//		}
//}
